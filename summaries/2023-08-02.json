{
  "summary": [
    {
      "summary": "The author of the post is providing an update on their experiment regarding the development of new community processes to specify covenants in the Bitcoin community. They mention that the goal of this experiment was to build a consistent framework to evaluate covenant proposals and open up the consensus changes development process beyond the boundaries of Bitcoin Core. The author acknowledges other complementary initiatives, such as the bitcoin-inquisition fork and the archiving of covenant proposals under the Optech umbrella. They also mention the Bitcoin Contracting Primitives Working Group, which aimed to archive and document various primitives and corresponding protocols related to Bitcoin contracts. The author states that they have not been able to actively pursue this experiment further due to their commitment to Lightning Network development. They express the belief that the focus should be on making the Lightning Network work smoothly and securely, as they estimate it to be more critical for the survival of Bitcoin. The author encourages others to continue working on covenant changes proposals and mentions their own plans to work on R&D projects related to CoinPool and security reviews of consensus changes. They emphasize the importance of having technical historians and archivists to assess and preserve consensus changes proposals. The author invites others interested in maintaining and nurturing the Bitcoin Contracting Primitives Working Group to reach out to them. They conclude by stating that they have received interest and opportunities to work on consensus changes from various organizations in the Bitcoin space.",
      "summaryeli15": "The author is giving an update on their experiment with a new process to specify covenants in the Bitcoin community. They discuss the goals of the process, including building a framework to evaluate covenant proposals and expanding the consensus development process. However, the author states that they will no longer actively pursue this process due to competing priorities, specifically focusing on Lightning Network development for the time being. They also mention other initiatives related to covenant proposals and invite others to continue the work if they have the resources and commitment.",
      "title": "On the experiment of the Bitcoin Contracting Primitives WG and marking this community process \"up for grabs\"",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021786.html"
    },
    {
      "summary": "The implementation being discussed is a version of 2-of-2 Schnorr Musig2 for statechains. In this implementation, the server (party 1) will be fully \"blinded\" and will not learn certain information. The security of the statechains relies on trusting the server to report the number of partial signatures generated for a specific key, rather than trusting it to enforce rules on what it has signed.\n\nThe 2-of-2 musig2 protocol operates with two parties generating private and public keys. The public keys are aggregated to create an aggregate public key. To sign a message, each party generates a nonce and computes a challenge. The final signature is obtained by combining the nonces and applying a computation to the challenge.\n\nIn the case of blinding party 1, certain adjustments need to be made. Party 1 only sends its public key to party 2, and the nonce aggregation and computation of the challenge are handled solely by party 2. Party 1 does not learn the final signature or the message being signed.\n\nThese considerations are presented for discussion and any potential issues or comments are welcomed.",
      "summaryeli15": "A new version of the Schnorr Musig2 protocol called 2-of-2 is being implemented for statechains. In this version, the server (party 1) will be fully \"blinded\" so that it can generate an aggregate signature without learning the aggregate public key, signature, or the message being signed. The security of the system relies on trusting the server to report the number of partial signatures it has generated. This protocol involves generating private and public keys, aggregating them, and signing messages. Party 1 does not need to independently compute and verify certain values, allowing it to be blinded from certain information.",
      "title": "Blinded 2-party Musig2",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021792.html"
    },
    {
      "summary": "In this article, the author presents a mathematical demonstration of a method to compute blinding factors for onion routing. The goal of this method is to ensure that only certain nodes in the routing path have knowledge of specific blinding factors.\n\nThe demonstration starts with the ultimate receiver having a secret 'r' and giving the ultimate sender the point 'R', where 'R = r * G'. In the simplest case, where there are no intermediate nodes, the ultimate sender chooses a random scalar 'e' as the blinding factor and constructs an onion with 'e' decryptable by the ultimate receiver. The PTLC (Payment-Time Lock Contract) is sent to the ultimate receiver with the point 'e * G + R'. The receiver can claim the PTLC by revealing 'e + r'.\n\nIf there is an intermediate node, such as Carol, involved, the ultimate sender still chooses a random scalar 'e', but it also needs to generate two additional scalars, 'c' and 'd', such that 'c + d = e'. The sender encrypts 'e' to the ultimate receiver and encrypts 'c' and 'd' to Carol. The PTLC is sent to Carol with the point 'c * G + R'. Carol adds the 'd * G' that it received from the onion and sends the PTLC to the next hop. The ultimate receiver cannot differentiate whether the PTLC was received directly or through an intermediate node because it sees 'e * G + R'. Carol computes 'c + r' when the ultimate receiver releases 'e + r' and can claim the incoming PTLC.\n\nIf Carol is a Trampoline node, the ultimate sender encrypts 'e' to the ultimate receiver and 'd' and the next Trampoline hop to Carol. Carol decrypts the onion and searches for a route to the ultimate receiver. Carol selects 'a' and 'b' such that 'a + b = d' and creates a new onion. The PTLC is sent to the next hop, the ultimate receiver, with the point 'c * G + R + a * G + b * G'. The ultimate receiver cannot differentiate whether it was reached via a Trampoline, a non-Trampoline intermediate, or directly.\n\nIn conclusion, this method allows for the computation of blinding factors in onion routing, ensuring that only certain nodes have knowledge of specific blinding factors.",
      "summaryeli15": "This article explains a way to make transactions on a blockchain more private. It talks about using blinding factors to hide information from certain nodes. The sender and receiver use these factors to encrypt and decrypt their messages. The article also explains how this method can be used when there are intermediate nodes involved. It shows how a trampoline node can be used to further hide the transaction details. Overall, this method ensures that only the sender and receiver know the details of the transaction, while other nodes can still process it.",
      "title": "Computing Blinding Factors in a PTLC and Trampoline World",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html"
    },
    {
      "summary": "Last month, the LNbits team discovered an exploit that allows an attacker to create fake balances by exploiting how invoices are handled. They have patched this in LNbits version 0.10.5 and advise immediate updates. The attack involves inserting the payment hash from one payment into a different payment, creating a malicious invoice. The attacker then creates a new account and pays the malicious invoice, tricking the backend into thinking it is a valid payment. The backend settles the payment by crediting the original invoice and debiting the malicious one, resulting in the attacker gaining funds. To mitigate this, backends should use unique \"checking id's\" for internal payments or implement additional checks on invoice details. The lesson here is to understand the sophistication of LN-savvy attackers and to be aware that the \"payment hash\" in an invoice only represents the preimage hash and not payment details.",
      "summaryeli15": "The LNbits team found a problem that allowed attackers to create fake balances. They fixed it in their latest version and are urging people to update. They explain how the attack worked and warn that it could be possible in other Lightning applications. They suggest using unique IDs or additional checks to prevent this type of attack. They also point out that the \"payment hash\" is actually just a \"preimage\" hash and not a full description of the payment.",
      "title": "Potential vulnerability in Lightning backends: BOLT-11 \"payment hash\" does not commit to payment!",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html"
    },
    {
      "summary": "The author shares a side project focused on collecting data on the lightning network. They aim to track the network's evolution, analyze proposed solutions like channel jamming, and support university research that lacks real data access. The goal is to define and gather information that can be shared to evaluate ideas and proposals. A more detailed explanation is provided in [1], and an experimental explorer can be found at [2]. Additionally, a public Graphql API is available at [3]. The author hopes that this project will be helpful to others. [1] provides a GitHub link to the LNMetrics RFC, which likely contains further details on the project. [2] and [3] are URLs to an experimental explorer and public Graphql API, respectively.",
      "summaryeli15": "The person wants to tell others about their side project where they collect data on the lightning network. They want to study how the network is changing over time and test new ideas to see how they affect the network. They also hope to help universities by providing them with real data. They have a detailed explanation of their project in [1], and you can see their experiment at [2]. They also have a public Graphql API at [3].",
      "title": "An Open Source Framework to Collect Lightning Network Metrics",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004011.html"
    },
    {
      "summary": "The annual specification meeting took place in New York City in June. The meeting focused on the discussion of various topics related to Lightning Network development. The meeting notes are available as a transcript-style document. The participants attempted to record larger group topics and followed the structure of the discussions at the summit. Some of the topics discussed included package relay, HLTCs (Hashed Time-Locked Contracts), cluster mempool, Taproot, Gossip V1.5 vs V2, multi-sig channel parties, PTLCs (Point Time-Locked Contracts), and simplified commitments.\n\nDuring the meeting, it was suggested that a versioning system could be implemented to make it easier to track changes and compatibility. The idea of extensions was also brought up, where specific features could be added as extensions to the protocol. This would help simplify the protocol and make it more modular. Additionally, discussions were held on reputation-based solutions to prevent channel jamming attacks, and the use of trampoline payments for asynchronous payments.\n\nOverall, the meeting served as a platform for in-depth discussions on various technical aspects of Lightning Network development and the future direction of the protocol.",
      "summaryeli15": "During the annual specification meeting in NYC, a transcript-style notes document was created to summarize the discussions at the summit. The main topics discussed included package relay, HTLCs, mempool policy, taproot, gossip protocol, and channel jamming. Some of the proposals discussed were simplified commitments, reputation-based jamming mitigation, trampoline payments, and versioning of the Lightning Network specification. The goal of these discussions was to simplify the protocol, improve the network's performance and security, and make it easier for implementation and interoperability.",
      "title": "LN Summit 2023 Notes",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004014.html"
    }
  ]
}