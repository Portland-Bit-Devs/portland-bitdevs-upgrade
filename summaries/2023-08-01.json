{
  "summary": [
    {
      "summary": "The text discusses the progress and future of the Bitcoin Contracting Primitives Working Group. The author introduces the idea of a new community process to specify covenants and explains the goals of the initiative, such as building a framework to evaluate covenant proposals, opening the consensus changes development process, and maintaining a high-quality technical archive. The author also mentions complementary initiatives by other individuals in the community, such as the bitcoin-inquisition fork and the archiving of covenant proposals under the Optech umbrella. The author reflects on their own involvement in the effort, stating that they have been busy with Lightning-side projects and have not run online meetings since April. They express the need to allocate more time and energy to Lightning robustness, considering it critical for Bitcoin's survival. The author encourages individuals working on covenant changes proposals and mentions their own plans for R&D works on CoinPool and security reviews of consensus changes. They emphasize the importance of technical historians, archivists, and QA developers in advancing the capabilities of Bitcoin Script. The author concludes by inviting individuals interested in maintaining and nurturing the Bitcoin Contracting Primitives Working Group to reach out.",
      "summaryeli15": "The text discusses the idea of a new community process to specify covenants within the Bitcoin network. The author mentions previous efforts and initiatives that have been undertaken to improve the consensus development process for Bitcoin. They also acknowledge the need for technical historians and archivists to assess and preserve consensus change proposals. The author expresses their personal conclusion that they will prioritize their time and energy on Lightning Network development over the covenant process. They encourage others to continue working on covenant changes and propose collaborations to advance the capabilities of Bitcoin Script.",
      "title": "On the experiment of the Bitcoin Contracting Primitives WG and marking this community process \"up for grabs\"",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021786.html"
    },
    {
      "summary": "The text describes the implementation of a 2-of-2 Schnorr Musig2 protocol for statechains. In this protocol, the server (Party 1) is fully 'blinded' and does not have access to crucial information such as the aggregate public key, aggregate signature, and the message being signed. The security of this system relies on trust in the statechain server to report the number of partial signatures generated for a specific key, as well as the verification of signatures generated client-side. The protocol involves the generation of private and public keys for both parties, the aggregation of keys, the generation of nonces and their aggregation, and the computation of the final signature. In the case of blinding, Party 1's role is modified to prevent them from learning the full public key, final signature, or message. Party 1 only sends certain components to Party 2 for the necessary computations. The author seeks feedback and comments on this approach and potential issues.",
      "summaryeli15": "The text discusses the implementation of a cryptographic protocol called 2-of-2 Schnorr Musig2 for statechains. In this version, referred to as \"blinded statechains,\" a server (known as \"party 1\") is \"blinded\" to certain information. It can generate a private key required for an aggregate signature, but it does not learn the aggregate public key, aggregate signature, or the message being signed. The security relies on trusting the server to report the number of partial signatures it has generated, rather than enforcing rules on what it has signed. The protocol involves generating private and public keys, aggregating them, signing a message, and creating a final signature. To blind party 1, certain steps are taken to prevent it from learning certain information. The author seeks feedback on this approach.",
      "title": "Blinded 2-party Musig2",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021792.html"
    },
    {
      "summary": "The text discusses a mathematical demonstration for computing blinding factors in a specific way. It explains that all non-Trampoline intermediate nodes and the receiver only need to know one blinding factor. Trampoline nodes can provide the blinding factors to the sub-routes without the non-Trampoline nodes knowing they are on a trampoline. \n\nIn the simplest case, if the ultimate sender is directly channeled with the ultimate receiver, the sender chooses an error blinding factor, constructs an onion with it, and offers a PTLC. The ultimate receiver claims the PTLC by revealing its blinding factor and can't differentiate whether it received from a direct or indirect channel.\n\nIf there is an intermediate node, the sender needs to generate two scalars. The sender encrypts the onion to the ultimate receiver and the intermediate node, who adds its per-hop blinding factor and sends it to the next hop.\n\nIf the intermediate node is a Trampoline node, the sender creates a Trampoline-level onion. The intermediate node decrypts and searches for a route to the next Trampoline hop. It then creates a new onion with its own blinding factor and sends it to the next hop.\n\nOverall, the ultimate receiver receives the same result regardless of the direct or indirect channel, and the sender knows the blinding factor needed to claim the payment.",
      "summaryeli15": "This text describes a mathematical demonstration of a method to compute blinding factors in a way that allows for secure communication. It explains how the process works when there is a direct connection between the sender and receiver, as well as when there is an intermediate node involved. In the case of an intermediate node, the sender needs to generate additional factors to ensure secure communication. It then goes on to explain how this method can be applied when the intermediate node is a \"Trampoline\" node, and how the ultimate receiver can still receive the encrypted information without knowing whether it came from a Trampoline or not. Overall, this method ensures secure communication and allows for accurate tracking of payment claims without compromising privacy.",
      "title": "Computing Blinding Factors in a PTLC and Trampoline World",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html"
    },
    {
      "summary": "The text after the asterisk discusses an exploit discovered by the LNbits team that allows an attacker to create balances by manipulating invoices. The exploit has been patched in LNbits version 0.10.5, and users are urged to update. The attack involves inserting a payment hash from one payment into a different payment, creating a malicious invoice. The backend is tricked into believing that the malicious invoice is legitimate. The critical part of the attack is that payment hashes only commit to the preimage and not payment details like the amount. The mitigation for this exploit is to use unique \"checking id's\" for internal payments or to perform additional checks on the invoice details. Two lessons learned from this exploit are the sophistication of LN-savvy attackers and the importance of realizing that the payment hash is actually a preimage hash. The author suggests referring to it as a preimage hash going forward.",
      "summaryeli15": "LNbits, a team of developers, recently discovered an exploit that allows attackers to create fake balances in Lightning applications. They have released a patch to fix the issue and are urging users to update their software. The exploit involves manipulating the payment hash of an invoice, tricking the system into thinking that one payment is equal to another. This attack requires a deep understanding of the underlying technology and custom tools to create the malicious invoice. The lesson learned is that the \"payment hash\" should be seen as a \"preimage\" hash and not as a commitment to payment details. Developers are advised to use additional checks to ensure invoice integrity.",
      "title": "Potential vulnerability in Lightning backends: BOLT-11 \"payment hash\" does not commit to payment!",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html"
    },
    {
      "summary": "The text discusses a side project focused on collecting data on the lightning network. The purpose of this project is to understand the network's evolution, assess proposed solutions like channel jamming, and support university research that lacks access to real data. The idea is to define and gather information that can be shared to evaluate ideas and proposals. More details about the project can be found in [1], and an experimental explorer can be accessed at [2], along with a public Graphql API at [3]. The author shares the project with the hope that it will be beneficial to someone.",
      "summaryeli15": "The writer wants to talk about their project collecting data on the lightning network. They want to track how the network is changing over time and test different solutions. They also want to help university researchers who can't access real data. They provide links to more information and an experimental explorer where people can see the data. They hope this will be helpful to someone.",
      "title": "An Open Source Framework to Collect Lightning Network Metrics",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004011.html"
    },
    {
      "summary": "In June, there was an annual specification meeting where they attempted to take transcript-style notes. They made the notes available in a Google document. They discuss topics such as package relay, V3 transactions, anchors, and cluster mempool. They mention the need for a \"top of block\" mempool and a cluster mempool to facilitate package RBF. They also discuss Taproot and the changes it brings to anchors and the revocation path. They talk about a co-op close feature, script binding in gossip, multi-sig channel parties, and PTLCs. They discuss the concept of jamming and propose a hybrid approach to mitigating jamming using monetary, reputation, and scarce resource strategies. They also propose a reputation system for channel jamming. They discuss simplified commitments and the possibility of adding NACK messages. They consider the idea of versioning the Lightning Network specification and introducing extensions to make the protocol more modular. Finally, they briefly touch on trampoline payments and the use of blinded payments in trampoline routing.",
      "summaryeli15": "The text discusses several topics related to the Lightning Network (LN). Firstly, it mentions a specification meeting in NYC where transcript-style notes were taken. The meeting covered various topics, including Package Relay, HLTCs, Taproot, Gossip, and more. The text proposes a hybrid approach to deal with channel jamming, combining monetary, reputation, and scarce resource solutions. It also suggests using reputation to prioritize HTLC slots and liquidity. The text further suggests simplifying commitments to improve the LN's state machine. Lastly, it addresses the idea of versioning the LN protocol and the need for modularization and extension of the protocol specifications.",
      "title": "LN Summit 2023 Notes",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004014.html"
    }
  ]
}