{
  "summary": [
    {
      "summary": "The text after the asterisk is a message from Antoine, who is discussing the progress of a community process to specify covenants. Antoine explains that the goals of the process were to build a framework to evaluate covenant proposals, explore common grounds between proposals, open up the consensus changes development process beyond Bitcoin Core, and maintain a high-quality technical archive. He acknowledges other complementary initiatives, such as the bitcoin-inquisition fork and the archiving of covenant proposals under the Optech umbrella. Antoine mentions the Bitcoin Contracting Primitives Working Group and the discussions that have taken place on covenant changes proposals. However, Antoine states that he will no longer actively pursue the community process, as he wants to allocate his time and energy to working on Lightning Network robustness. He encourages others to continue working on covenant changes proposals and suggests using existing tools and resources. Antoine expresses the need for technical historians and archivists to assess and preserve consensus changes proposals and emphasizes the importance of thorough testing before deployment. He invites those interested in maintaining and nurturing the Bitcoin Contracting Primitives WG or collaborating with Optech to reach out. Antoine concludes with a reference to a pending whitepaper and mentions the interest he has received from R&D non-profits, individuals, and VC firms to commit resources to advancing consensus changes.",
      "summaryeli15": "The author of the text is providing an update on their experiment with a new community process for specifying covenants in Bitcoin. They discuss the goals of the process, including evaluating covenant proposals and opening up the consensus development process beyond Bitcoin Core. They mention other initiatives related to covenant proposals and archiving. The author acknowledges their limited involvement due to focusing on Lightning development but highlights the importance of working on Lightning robustness for Bitcoin's survival. They express support for small incremental changes to Bitcoin Script and mention their own R&D work on CoinPool. The author also emphasizes the need for technical historians and archivists to assess and preserve consensus change proposals. They invite others to continue the maintenance of the Bitcoin Contracting Primitives WG.",
      "title": "On the experiment of the Bitcoin Contracting Primitives WG and marking this community process \"up for grabs\"",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021786.html"
    },
    {
      "summary": "The text after the asterisk discusses the implementation of a version of 2-of-2 Schnorr Musig2 for statechains. In this implementation, the server (party 1) will be fully 'blinded', meaning it holds a private key necessary for generating an aggregate signature on an aggregate public key but does not learn the aggregate public key, aggregate signature, or message being signed.\n\nThe security of the blinded statechains depends on the statechain server being trusted to report the number of partial signatures generated for a specific key. The full set of signatures is verified client-side.\n\nThe 2-of-2 musig2 protocol is explained, outlining the process for generating private and public keys for party 1 and party 2. The shared public key is computed from both parties' public keys. To sign a message, both parties generate nonces and compute challenges and signatures.\n\nIn the case of blinding party 1, the text suggests that key aggregation and nonce aggregation should be performed only by party 2. Party 1 will only send its public key and nonce to party 2. Party 2 will compute the challenge and send it to party 1 for signature calculation. This approach ensures that party 1 remains blinded and does not learn the final signature or message.\n\nThe author seeks comments or potential issues regarding this implementation.",
      "summaryeli15": "The text discusses the implementation of a cryptographic protocol called 2-of-2 Schnorr Musig2 for statechains. Statechains involve a server and another party, and in this implementation, the server is \"blinded.\" This means that while it holds a private key necessary for generating an aggregate signature, it does not learn certain information, including the aggregate public key, the aggregate signature, or the message being signed. The security of this implementation relies on trust in the server's reporting of the number of partial signatures generated and the verification of the generated signatures on the client side. The text also describes the steps involved in the musig2 protocol and explores considerations for implementing the protocol with a blinded server. The author seeks comments and feedback on this approach.",
      "title": "Blinded 2-party Musig2",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021792.html"
    },
    {
      "summary": "The text explains a mathematical demonstration of a method to compute blinding factors for privacy and anonymity in routing. It illustrates how blinding factors can be used to create onion routing where intermediate nodes only need to know one blinding factor and the receiver only needs to know one as well.\n\nIn the simplest case, where there are no intermediate nodes, the sender chooses a random blinding factor and constructs an onion that can be decrypted by the receiver. The sender offers a payment with the blinding factor's corresponding point. The receiver can claim the payment by revealing the blinding factor plus their secret.\n\nWhen intermediate nodes are introduced, the sender needs to generate additional blinding factors. Each intermediate node adds its per-hop blinding factor to the input point and uses the result as the output point to the next hop. The ultimate receiver still sees the same point and cannot distinguish if it came from an intermediate node or directly.\n\nIf an intermediate node is a trampoline node and doesn't have a detailed route to the next trampoline hop, the sender creates a trampoline-level onion. The trampoline node decrypts the onion and searches for a route to the next trampoline hop. It then creates its onion and continues forwarding.\n\nIn both cases, the ultimate receiver can claim the payment by revealing the correct values, and all intermediate nodes have enough data to claim their incoming payment, but only the ultimate sender knows the final blinding factor needed to recover the secret.\n\nOverall, the technique allows for privacy and anonymity in routing by using blinding factors and onion routing.",
      "summaryeli15": "This text is a technical explanation of a mathematical method for computing blinding factors in a secure communication protocol. The author discusses different scenarios where these blinding factors can be used to ensure privacy and anonymity in sending messages. They explain how in each scenario, the sender and receiver exchange certain points and encrypt them using these blinding factors. By doing so, the receiver can claim a payment without revealing any sensitive information. The author also introduces the concept of trampoline nodes, which can route messages on behalf of the sender and receiver, further ensuring anonymity. This method allows the ultimate receiver to receive messages without knowing whether they came directly or through intermediate nodes.",
      "title": "Computing Blinding Factors in a PTLC and Trampoline World",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html"
    },
    {
      "summary": "LNbits, a team of developers, recently discovered an exploit that allows an attacker to create fraudulent balances using Lightning Network invoices. The exploit takes advantage of a flaw in how invoices are handled internally. The team has patched this in LNbits version 0.10.5 and advises users to update as soon as possible. The attack involves the attacker inserting a payment hash from one payment into a different payment, tricking the backend into treating them as the same. The backend settles the payment by crediting the original payment and debiting the fraudulent one, allowing the attacker to gain 999 satoshis. To mitigate this issue, backends should either use unique \"checking id's\" for internal payments or implement additional checks to ensure invoice details haven't been tampered with. This exploit highlights the sophistication of LN-savvy attackers and underscores the importance of understanding that the \"payment hash\" only represents the preimage, not payment details like amount or pubkey.",
      "summaryeli15": "In a recent discovery, the LNbits team found an exploit that allowed attackers to create fake balances by manipulating the payment process within the Lightning Network. This issue has been patched in the latest version of LNbits, and users are advised to update immediately. The attack involved inserting the payment hash of one payment into a different payment, tricking the system into thinking they were the same. By exploiting this flaw, attackers could generate false balances. To prevent such attacks, backends should use unique checking IDs or additional checks to verify invoice details haven't been tampered with. It's important to note that the payment hash only verifies the preimage, not the payment details like the amount. Moving forward, referring to it as the \"preimage hash\" is suggested.",
      "title": "Potential vulnerability in Lightning backends: BOLT-11 \"payment hash\" does not commit to payment!",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html"
    },
    {
      "summary": "The author shares their side project aimed at collecting data on the lightning network. They want to track the network's evolution, evaluate proposals like channel jamming, and support university research that lacks access to real data. The idea is to define and gather information that can be shared among people to evaluate ideas and proposals. The author provides a more detailed explanation of their idea in [1]. They also have an experimental explorer available at [2] and a public GraphQL API at [3]. They hope that this project will be useful to others.",
      "summaryeli15": "The author is sharing a side project where they collect data on the lightning network. They want to track the network's evolution, evaluate proposals, and support university research. They aim to define and collect information that can be shared to evaluate ideas/proposals. There is a more detailed explanation in the provided link [1], and you can explore the data through the experimental explorer [2] or use the public Graphql API [3]. The author hopes that this project will be helpful to someone.",
      "title": "An Open Source Framework to Collect Lightning Network Metrics",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004011.html"
    },
    {
      "summary": "The text after the asterisk discusses a new close protocol for Lightning Network channels. The protocol is \"taproot ready\" and allows each side to indicate whether they want to omit their own output. The closing process includes two messages: `closing_complete` and `closing_sig`. In the `closing_complete` message, each peer specifies the fee it will pay and signs the transaction. The sender of the `closing_complete` message must set the fee to be less than or equal to its outstanding balance and can choose to include its own output or not. The receiver of the `closing_complete` message must verify the signatures and select one to respond to by signing and broadcasting the corresponding transaction. The `closing_sig` message indicates which transaction to broadcast and is sent by the sender of the `closing_complete` message. The text also explains the rationale behind this close protocol and the requirements for each node.",
      "summaryeli15": "The text discusses a protocol called \"closing negotiation\" for the Lightning Network. This protocol allows for the closing of a payment channel between two nodes. The protocol includes several steps, such as initiating closing with a \"shutdown\" message, negotiating the closing with a \"closing_complete\" message, and finalizing it with a \"closing_sig\" message. The protocol ensures that both parties agree on the fee for closing the channel and allows each side to indicate whether they want to include their own payment output in the final transaction. This protocol aims to prevent failure scenarios caused by fee disagreements and provides flexibility in deciding the transaction structure.",
      "title": "option_simple_close for \"unfailable\" closing",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004013.html"
    },
    {
      "summary": "The text after the asterisk discusses various topics related to the Lightning Network specification. It mentions the annual specification meeting and the attempt to take transcript-style notes. The discussion covers several areas, including package relay, ephemeral anchors, HTLCs, mempool policy, taproot, gossip versions, channel jamming, simplified commitments, reputation for channel jamming, and trampoline payments. The idea of versioning the Lightning Network specification is also discussed, along with the possibility of modularizing and restructuring the specification for better readability and implementation. The text concludes with a mention of asynchronous payments and the use of trampoline routing.",
      "summaryeli15": "The text discusses various topics related to the Lightning Network (LN) specification. It mentions a recent specification meeting held in New York City and provides notes from the meeting. The discussion touches on package relay, commitments, cluster mempools, taproot, gossip protocol, reputation for channel jamming, simplified commitments, and trampoline payments. Some key points include the proposal for a hybrid approach to tackling channel jamming, the introduction of turn-taking to simplify the LN state machine, and the suggestion to modularize the specification document by using extensions. The text also highlights the need for versioning and improved communication within the LN community.\n",
      "title": "LN Summit 2023 Notes",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004014.html"
    }
  ]
}