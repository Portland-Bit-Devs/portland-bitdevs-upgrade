{
  "summary": [
    {
      "summary": "The author begins by discussing their previous efforts to propose a new community process for specifying covenants. They mention their goals of building a framework for evaluating covenant proposals and expanding the consensus changes development process. They also mention complementary initiatives undertaken by others in the community. The author acknowledges that they have been more focused on Lightning-side and other Bitcoin projects recently, and they realize the importance of prioritizing the development of a secure and reliable Lightning Network over extended covenant capabilities. They encourage others to continue working on covenant changes proposals and express their intention to focus on R&D works on CoinPool. They also highlight the need for technical historians and archivists to assess, collect, and preserve consensus change proposals. The author invites others to continue the maintenance and nurturing of the Bitcoin Contracting Primitives WG and mentions various resources for further information. They conclude by emphasizing the importance of collaboration and commitment to advancing softforks and covenants in the Bitcoin space.",
      "summaryeli15": "The text discusses the introduction of a new community process to specify covenants within the Bitcoin community. The goals of this process include building a consistent framework to evaluate covenant proposals, exploring common grounds between proposals, and opening up the consensus changes development process beyond the historical boundaries of Bitcoin Core. Various initiatives have been undertaken in this regard, including the creation of a GitHub repository to archive and document Bitcoin contracting primitives and protocols. The author acknowledges that they have not been able to dedicate as much time to this process as initially planned due to their focus on Lightning development. They express that the development of the Lightning Network is more critical for Bitcoin's survival and thus they will prioritize this work. However, they encourage others to continue working on covenant changes proposals. The author believes that Bitcoin has compelling technical proposals but lacks a crowd of technical historians and archivists to assess and preserve consensus changes proposals. They invite individuals interested in maintaining and nurturing the Bitcoin Contracting Primitives Working Group or collaborating with other initiatives to reach out.",
      "title": "On the experiment of the Bitcoin Contracting Primitives WG and marking this community process \"up for grabs\"",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021786.html"
    },
    {
      "summary": "The text discusses the implementation of a version of 2-of-2 Schnorr Musig2 for statechains, specifically focusing on party 1. Party 1 will be fully \"blinded,\" meaning it can hold a private key required for generating an aggregate signature but does not learn the aggregate public key, aggregate signature, or the message being signed. Blinded statechains rely on trust in the statechain server to report the number of partial signatures generated for a specific key rather than enforce rules on what it has signed. The 2-of-2 musig2 protocol operates by generating private and public keys for both parties and aggregating them. To sign a message, each party generates a nonce and computes a challenge. In the case of blinding for party 1, key aggregation and nonce aggregation are performed by party 2. Party 2 computes the challenge and sends it to party 1 to compute part of the signature. Party 1 never learns the final signature or the message.",
      "summaryeli15": "In this text, the author discusses the implementation of a cryptographic protocol called 2-of-2 Schnorr Musig2. This protocol involves two parties, referred to as Party 1 and Party 2, who each generate a private key and a public key. The public keys are combined to create an aggregate public key. To sign a message, each party generates a nonce and combines them to create an aggregate nonce. The parties then compute a challenge and a partial signature. Finally, the two partial signatures are added together to create a final signature.\n\nIn the case of blinding for Party 1, the author suggests a method to prevent Party 1 from learning the full public key or the final signature. This can be achieved by having Party 2 perform the key aggregation step and the computation of the challenge. Party 1 only needs to send its public key and nonce to Party 2. This way, Party 1 remains blinded from the message and does not need to independently compute the challenge.\n\nThe author seeks feedback on this approach and invites comments on any potential issues.",
      "title": "Blinded 2-party Musig2",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021792.html"
    },
    {
      "summary": "This text explores a mathematical demonstration of a method to compute blinding factors. The goal is to ensure that all non-Trampoline intermediate nodes only require knowledge of one blinding factor and that the receiver only needs to know one as well. Trampoline nodes can provide blinding factors to the sub-routes without non-Trampoline nodes realizing they are on a trampoline. \n\nIn the example given, the ultimate sender has a secret `r` and sends the point `R = r * G` to the ultimate receiver. If the ultimate sender is directly connected to the ultimate receiver, it selects a random scalar `e` as an error blinding factor. The ultimate sender constructs an onion with `e` decryptable by the ultimate receiver and offers a PTLC with the point `e * G + R`. The ultimate receiver can claim the PTLC by revealing `e + r`. \n\nIf there is an intermediate node, Carol, involved, the ultimate sender still chooses a final error scalar `e` and generates scalars `c` and `d` such that `c + d = e`. The onion is encrypted with `e` for the ultimate receiver and `d` for Carol. Each non-Trampoline node adds its per-hop blinding factor times `G` and sends the result as the output point to the next hop.\n\nIf Carol is a Trampoline node, the ultimate sender encrypts the onion with `e` for the ultimate receiver, `d` for Carol, and the next Trampoline hop encrypted to Carol. Carol decrypts the onion, finds a route to the ultimate receiver, selects scalars `a` and `b`, and creates a new onion. The PTLC is sent with the point `c * G + R + a * G` to Alice, who decrypts the onion and forwards it to the ultimate receiver.\n\nIn both cases, the ultimate receiver receives the same `e * G + R` and cannot differentiate whether it was reached via a Trampoline or non-Trampoline intermediate or directly. Each node has enough data to claim its incoming PTLC, and only the ultimate sender knows `c` to recover `r`.",
      "summaryeli15": "In this text, the author explains a method of computing blinding factors in a mathematical demonstration. The goal is to ensure that certain nodes in a network only need to know one blinding factor during a transaction process. The author uses terms like \"ultimate receiver\" and \"ultimate sender\" to refer to the final destination and source of a transaction. They explain different scenarios, such as when the ultimate receiver needs to go through an intermediate node, and when that intermediate node is a \"Trampoline\" node. In each scenario, the author explains how the blinding factors are computed and how the ultimate receiver can claim the payment without knowing the full route taken by the transaction. They also highlight that only the ultimate sender knows a key factor that allows them to recover the secret value used by the ultimate receiver.",
      "title": "Computing Blinding Factors in a PTLC and Trampoline World",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html"
    },
    {
      "summary": "LNbits has discovered an exploit that allows an attacker to create balances through a quirk in how invoices are handled internally. The exploit involves inserting a payment hash from one payment into a different payment to create a malicious invoice. The attacker then creates a new account and pays the malicious invoice, tricking the backend into crediting them with the amount specified in the original payment. The critical part of the exploit is that payment hashes only commit to the preimage, not the payment details. To mitigate this, backends should use unique checking IDs or additional checks to verify the integrity of invoice details. This exploit highlights the sophistication of LN-savvy attackers and the misconception around the nature of payment hashes. The term \"preimage hash\" is suggested as a more accurate depiction of this field.",
      "summaryeli15": "In a recent discovery, the LNbits team found a loophole that allowed an attacker to create fake balances. They quickly fixed this issue in their latest update and advise everyone to update their LNbits version. The team wants to share the details of the attack to warn others working on similar applications. Basically, the attacker created two invoices, one legitimate and one malicious. By manipulating the payment hash, they tricked the system into thinking the malicious invoice was the legitimate one, allowing them to exploit the system and gain funds. To prevent this, developers should use unique checking IDs or implement additional checks to ensure the invoice details haven't been tampered with. The incident highlights the sophistication of Lightning Network-savvy attackers and emphasizes that the \"payment hash\" of an invoice is only a \"preimage\" hash and not a full payment hash.",
      "title": "Potential vulnerability in Lightning backends: BOLT-11 \"payment hash\" does not commit to payment!",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html"
    },
    {
      "summary": "The author is sharing one of their side projects where they collect data on the lightning network to track its evolution, study solutions like channel jamming, and support university research that lacks access to real data. They aim to define and collect information that can be shared to evaluate ideas and proposals. They provide a more detailed explanation of the idea in a link to a GitHub page and share an experimental explorer and public Graphql API. The author hopes that this project will be helpful to others.",
      "summaryeli15": "The author of the text is sharing a side project they have been working on. They are interested in collecting data on the lightning network, which is a network for fast transactions using cryptocurrency. They want to look at how the network is changing over time and evaluate different proposals for improving it. They also want to support university research by providing access to this data. The author provides links to more detailed information and an experimental explorer where the data can be accessed. They hope that this project will be useful for others.",
      "title": "An Open Source Framework to Collect Lightning Network Metrics",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004011.html"
    },
    {
      "summary": "The text after the asterisk discusses various topics related to the Lightning Network. The first topic is about Package Relay, which proposes using ancestor package relay for scoring mempool transactions. It also discusses the use of commitment transactions and the introduction of ephemeral anchors. The next topic is about Taproot, which introduces changes to anchors and to_remote, making them more complicated. The text then goes on to discuss Gossip V1.5 vs V2, with a focus on script binding and amount binding. It also mentions the use of reputation, monetary solutions, and scarce resources to mitigate jamming attacks on the network. The next topic is about simplified commitments, which simplifies the state machine by introducing turn taking between peers. Finally, there is a discussion about the meta spec process, including versioning, extensions, and the need for clearer documentation. The text also briefly touches on async payments and trampoline routing.",
      "summaryeli15": "The text discusses several topics related to recent developments in the Lightning Network protocol. It first mentions a proposal for package relay, which would allow for easier inclusion of transactions in the mempool. It also discusses changes to commitment transactions and the introduction of ephemeral anchors. The text then moves on to other topics such as gossip protocol versions, reputation systems to mitigate channel jamming attacks, simplified commitments to simplify the state machine, and the possibility of versioning the Lightning Network protocol. Finally, it touches on the concept of async payments or trampoline routing, where light nodes only need to know a few trampolines to route payments through the network. The discussion concludes with considerations for gossip in trampoline routing and the potential for splitting multi-path payments over trampoline routes.",
      "title": "LN Summit 2023 Notes",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004014.html"
    }
  ]
}