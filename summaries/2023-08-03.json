{
  "summary": [
    {
      "summary": "The author of this post is reflecting on their experiment of introducing a new community process to specify covenants in Bitcoin development. They wanted to build a framework for evaluating covenant proposals, foster consensus changes beyond Bitcoin Core, and maintain a high-quality technical archive. They acknowledge complementary initiatives, such as the Bitcoin-inquisition fork and the archiving of covenant proposals under the Optech umbrella.\n\nThe author highlights the progress made in the Bitcoin Contracting Primitives Working Group (WG), which included monthly meetings, in-depth discussions, and collaboration between community members. However, they express their decision to prioritize their time and energy on Lightning Network (LN) development, believing it is more critical for Bitcoin's survival. Despite this, they still see value in incremental changes to Bitcoin Script through soft forks like Taproot and Schnorr.\n\nThe author admits to potentially overpromising in the kickstart of the new process but believes the Bitcoin community has sufficient technical proposals and developers to evaluate them. They suggest the need for technical historians and archivists, as well as QA developers, to thoroughly assess and preserve consensus changes proposals. They invite individuals interested in maintaining the Bitcoin Contracting Primitives WG or collaborating on related initiatives to reach out.\n\nFinally, the author mentions a pending version 0.2 of the CoinPool whitepaper and the potential of conducting security reviews of consensus changes under pseudonyms. They also reference their belief in the importance of operational ground, legal information, and financial resources for long-term individual work on Bitcoin development.\n\nSource: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020763.html",
      "summaryeli15": "The author introduced a new community process to specify covenants in Bitcoin. They discussed the goals of the process, such as evaluating covenant proposals and maintaining a high-quality technical archive. They also mentioned other initiatives related to covenant development. However, the author stated that they will no longer actively pursue this process due to limited time and competing priorities, but encouraged others to continue the work. They also emphasized the importance of robustness in the Lightning Network for Bitcoin's survival.",
      "title": "On the experiment of the Bitcoin Contracting Primitives WG and marking this community process \"up for grabs\"",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021786.html"
    },
    {
      "summary": "In this article, the author discusses the implementation of a version of 2-of-2 Schnorr Musig2 for statechains. They propose that the server (party 1) be fully blinded, meaning it holds a private key required to generate an aggregate signature on an aggregate public key, but it does not learn: 1) the aggregate public key, 2) the aggregate signature, and 3) the message being signed. \n\nIn this model, the security relies on trusting the statechain server to report the number of partial signatures it has generated for a particular key, rather than enforcing rules on what it has signed. The signatures are verified client-side.\n\nThe 2-of-2 musig2 protocol works by party 1 generating a private key and public key, while party 2 does the same. The pubkeys are aggregated into a shared public key. To sign a message, each party generates a nonce and generates their signature. The final signature is a combination of both parties' signatures.\n\nWhen blinding party 1, the article suggests that party 2 performs key aggregation and nonce aggregation. Party 1 only sends its public key and nonce to party 2. Party 2 computes the challenge and sends it to party 1 to compute the partial signature. Party 1 never learns the final signature or the message being signed.\n\nThe author invites comments on this approach and potential issues.",
      "summaryeli15": "We are creating a secure method for sharing private information, called statechains. In this method, one party holds a private key necessary for generating a digital signature, but they don't know all the details. The security relies on that party only reporting the number of signatures generated, without revealing the actual signatures or the message being signed. This ensures their privacy. Additionally, there are steps in place to prevent this party from learning the full public key or final signature.",
      "title": "Blinded 2-party Musig2",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021792.html"
    },
    {
      "summary": "This article discusses a mathematical demonstration of a method to compute blinding factors for privacy-preserving transactions. The goal is for each node in the payment route to know only one blinding factor. In the simplest case, the sender and receiver are directly connected. The sender chooses a random blinding factor and constructs an onion with it. The sender also offers a payment contract with a point derived from the blinding factor. The receiver can claim the payment by revealing the blinding factor and the secret `r`. \n\nIn more complex scenarios involving intermediate nodes, the sender needs to generate two blinding factors, `c` and `d`, such that their sum equals the main blinding factor. The onion is encrypted with these blinding factors. Each intermediate node decrypts the onion, adds their per-hop blinding factor, and forwards it to the next hop. This process continues until the payment reaches the receiver. \n\nIf an intermediate node is a \"Trampoline\" node and doesn't know the detailed route to the next Trampoline hop, additional steps are taken. The sender encrypts the onion to the ultimate receiver and the next Trampoline hop using Carol as an intermediary. Carol finds a route to the next Trampoline hop and adds her own blinding factor. This process is repeated until the payment reaches the final Trampoline hop, which is the ultimate receiver. \n\nIn all cases, the ultimate receiver receives the same point and cannot determine if it came from a Trampoline node or directly from the sender. Each intermediate node has enough information to claim its incoming payment, but only the sender knows the necessary blinding factor to recover the secret `r`.",
      "summaryeli15": "This article explains a way to hide information when sending it through different nodes. It uses a technique called \"blinding factors\". Basically, the sender encrypts the information multiple times and each node in the route only knows one piece of the encryption. This makes it difficult for anyone along the route to know the full message. This is useful for protecting privacy when sending sensitive information over the internet.",
      "title": "Computing Blinding Factors in a PTLC and Trampoline World",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html"
    },
    {
      "summary": "The LNbits team discovered an exploit that allowed attackers to create fake balances by exploiting how invoices are handled internally. They released a patch in version 0.10.5 to fix this issue and urge users to update. The attack involved creating an invoice with a payment hash that pointed to a different payment, tricking the backend into thinking they were the same. The attacker could then create a new account and pay the fake invoice, resulting in them gaining satoshis. To mitigate this, backends should use unique checking IDs or additional checks to ensure invoice details haven't been tampered with. The lessons learned are that LN-savvy attackers can be sophisticated, and the payment hash of an invoice is only a preimage hash and does not commit to payment details like amount or pubkey. It is suggested to refer to it as a preimage hash instead.",
      "summaryeli15": "LNbits discovered an exploit that allowed attackers to create fake balances by manipulating invoices. They patched the issue in their software and advised users to update. The attack involved creating a malicious invoice by inserting the payment details from one payment into another. This tricked the system into crediting the attacker's account. To prevent such attacks, systems should use unique identifiers for internal payments or perform additional checks on invoice details. The incident highlights the need to understand the limitations of payment hashes in verifying payment details.",
      "title": "Potential vulnerability in Lightning backends: BOLT-11 \"payment hash\" does not commit to payment!",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html"
    },
    {
      "summary": "Vincent is sharing a side project where he collects data on the Lightning Network. His goal is to track the network's evolution, assess proposed solutions like channel jamming, and support university research lacking access to real data. He aims to define and collect information that can later be shared to evaluate ideas and proposals. A more detailed description of the project can be found at [1]. Additionally, an experimental explorer is available at [2], and a public Graphql API can be accessed at [3]. Vincent hopes that this project will be helpful to others.",
      "summaryeli15": "The writer is sharing their side project where they collect data on the lightning network. They want to see how the network is changing over time and evaluate different solutions. They also want to help universities by providing access to real data for research. They have a detailed idea in a GitHub document, an experimental explorer, and a public API for accessing the data. The writer hopes this will be helpful to others.",
      "title": "An Open Source Framework to Collect Lightning Network Metrics",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004011.html"
    },
    {
      "summary": "During the annual specification meeting, the Lightning Network community discussed several topics including package relay, taproot, gossip versions, reputation for channel jamming, simplified commitments, and asynchronous payments (trampoline). \n\nPackage relay is a proposal to improve the efficiency of transaction relay in the Lightning Network. It involves grouping transactions into packages based on their ancestry and scoring them accordingly. This will allow for easier inclusion of transactions into the mempool.\n\nTaproot is a proposed upgrade to the Bitcoin protocol that aims to enhance privacy and flexibility in smart contract execution. It introduces changes to how anchors and revocation paths are handled in the protocol.\n\nGossip versions refer to different versions of the gossip protocol used for spreading information across the Lightning Network. The participants discussed the possibility of allowing any type of taproot output to be advertised as a channel in the network instead of binding it to a specific script.\n\nReputation for channel jamming involves assigning reputation scores to Lightning Network nodes based on their behavior during channel jamming attacks. This reputation score is used to determine whether a node should have access to protected slots and liquidity in the network.\n\nSimplified commitments propose a change to the state machine of the Lightning Network to simplify the process of updating channel commitments. This would involve introducing a turn-taking mechanism for updates, making the state machine easier to understand and debug.\n\nAsynchronous payments, also known as trampoline payments, allow for payments to be routed through multiple intermediaries without revealing the entire payment route to each intermediary. This improves privacy and scalability in the network.\n\nOverall, the Lightning Network community discussed various proposals to improve the efficiency, privacy, and scalability of the network, as well as address issues related to channel jamming and channel commitment updates.",
      "summaryeli15": "A group of people recently met in NYC for their annual specification meeting, where they discussed various topics related to the Lightning Network (LN) protocol. They made attempts to take transcript-style notes during the meeting, which are publicly available online. One of the main topics discussed was the proposal for package relay, which aims to improve the process of getting transactions into the mempool. They also discussed changes related to HLTCs (hashed timelock contracts) and cluster mempools. Another topic covered was the upcoming taproot upgrade and its implications for anchors and revocation paths. They also discussed the use of reputation-based systems to mitigate channel jamming attacks. Finally, they talked about the idea of having versions and extensions for the LN protocol to improve modularity and compatibility.",
      "title": "LN Summit 2023 Notes",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004014.html"
    }
  ]
}